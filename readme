
-----------REQUIREMENTS------------------
-DONE- Create and use at least two pieces of custom middleware.
5%
-DONE- Create and use error-handling middleware.
5%
-DONE- --Use at least three different data categories (e.g., users, posts, or comments).
5%
-DONE-Utilize reasonable data structuring practices.
5%
-DONE-Create GET routes for all data that should be exposed to the client.
5%
-DONE-Create POST routes for data, as appropriate. At least one data category should allow for client creation via a POST request.
5%
-DONE- Create PATCH or PUT routes for data, as appropriate. At least one data category should
-DONE-At least one data category should allow for client manipulation via a PATCH or PUT request.
5%
-DONE- Create DELETE routes for data, as appropriate. At least one data category should allow for client deletion via a DELETE request.
5%
Include query parameters for data filtering, where appropriate. At least one data category should allow for additional filtering through the use of query parameters.
5%
Note: DO NOT use API keys; this makes it more difficult for instructors to grade finished projects efficiently.
Utilize route parameters, where appropriate.
5%
-DONE- Use simple CSS to style the rendered views.
Note: This is not a test of design; it is a test of serving static files using Express. The CSS can be very simple.
2%
-DONE-Include a form within a rendered view that allows for interaction with your RESTful API.
3%
-DONE-Utilize reasonable code organization practices.
5%
Ensure that the program runs without errors (comment out things that do not work and explain your blockers - you can still receive partial credit).
-DONE- Commit frequently to the git repository.
5%


----------APP explained


